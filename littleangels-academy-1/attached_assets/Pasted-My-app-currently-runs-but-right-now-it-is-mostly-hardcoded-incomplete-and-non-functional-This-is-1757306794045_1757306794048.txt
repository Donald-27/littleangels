My app currently runs, but right now it is mostly hardcoded, incomplete, and non-functional. This is not acceptable. I need you to completely rebuild and finalize the app into a fully working, production-ready school transport management system with zero placeholders, no broken functionality, and no half-implemented features.

ðŸ‘‰ Non-negotiable requirements:

No hardcoding anywhere â€“ every single page, dashboard, and component must pull live, dynamic data from the database/backend. Nothing should be static.

Implement full CRUD operations everywhere â€“ I must be able to add, edit, delete, and view students, staff, buses, routes, schedules, and settings, and see changes reflected immediately in the UI without manual refresh.

Database seeding â€“ provide meaningful, realistic seeded data (students, staff, buses, routes, trips, settings, attendance records, etc.) so I can instantly test the system without starting from scratch.

Every feature must work â€“ if there is a tab, button, or link, it must perform its intended function. No dead links, no non-functional buttons, no empty placeholders.

The settings panel must be fully functional â€“ changes to institution name, contact info, configurations, and user accounts should update dynamically and persist in the database.

ðŸ‘‰ Dashboards that must be fully implemented:

Students Dashboard â€“ Manage all student records (name, grade, guardian info, assigned bus, attendance history). Must support search, filters, and bulk actions.

Staff Dashboard â€“ Manage teachers, drivers, and admin staff. Include role assignment, driver license/vehicle assignment, and contact info.

Bus & Transport Dashboard â€“ Manage buses (capacity, routes, schedules, assigned drivers). Add, edit, and remove routes dynamically. Assign buses to students and drivers. Show availability and trip history.

Reports Dashboard â€“ Generate useful reports dynamically:

Student attendance per route.

Bus usage and occupancy reports.

Driver activity and trip logs.

Institution-wide transport summaries.
Must include export/download options (PDF, Excel).

Settings Dashboard â€“ Manage institution details, app configuration, roles/permissions, user accounts, notification settings, and system preferences.

ðŸ‘‰ UI/UX requirements:

The design must be modern, colorful, responsive, and professional.

Use charts, graphs, and tables for visualizing data.

Dashboards must look polished, with smooth layouts and intuitive navigation.

Avoid plain, boring layouts. Add stylistic touches to make it look institution-ready.

ðŸ‘‰ Additional must-have features (expand the scope):
I donâ€™t just want a basic CRUD app â€” I want a complete, realistic school transport management system. Add as many features as possible that are related and valuable, for example:

Role-based authentication and permissions (admin, staff, driver, student).

Notifications & alerts (e.g., bus delays, schedule changes, student not on board).

Attendance tracking system (students checking in/out when boarding buses).

Trip management (start trip, end trip, monitor which students are on board).

Parent/guardian portal (view childâ€™s bus schedule, notifications, attendance).

Map integration (optional: assign and visualize bus routes on a map).

Search & filtering everywhere (students by name, buses by route, staff by role, reports by date).

Analytics dashboard â€“ key metrics such as number of students, buses in use, attendance rate, driver activity.

Export & print â€“ allow exporting reports and data in PDF/Excel formats for institutional use.

Audit logs â€“ track all user activity (who edited what, when).

Multi-institution support (optional) â€“ ability to configure for multiple schools if needed.

ðŸ‘‰ End Goal:
When this is done, the app must feel like a complete, institution-ready, professional product that can be deployed immediately. I should be able to:

Add, remove, and update any entity (students, staff, buses, routes, etc.) dynamically.

Generate and export professional reports.

Use settings to configure the system without editing code.

Have staff, students, and admins log in with role-based access.

Enjoy a polished, modern UI with smooth navigation and beautiful dashboards.

ðŸ‘‰ Final instruction:
Go through the app systematically, dashboard by dashboard, feature by feature, and do not stop until every single part is fully functional, dynamic, and production-ready. Add as many relevant features as possible to make this a robust, realistic, complete school transport management system. Nothing should be left incomplete or half-done.